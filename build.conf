# shellcheck shell=bash disable=SC2034

ARCH_YAML='arch.yaml'

SOURCE_REPO='moonbuggy2000/alpine-python-builder'

# using the same wheel repo for both shared/no-shared builds means we don't break
# the cache when imorting dependencies, so we should have identical builds up
# until auditwheel is run or not run
# we should be able to use the no-shared library images for both cases, since
# any requirement wheels we import will run through auditwheel for the shared
# library builds
WHEEL_REPO="moonbuggy2000/python-alpine-wheels"

# build muti-platform with buildx
BUILD_MULTIARCH='true'

# currently we have no mechanism to pull wheels out of the multiarch images
# since buildx won't let us save to a file
NO_WHEELS_OUT='true'

# local output directory for built wheels
[ -z "${NO_WHEELS_OUT+set}" ] && WHEELS_OUT='wheels'

# don't pull self image at pre_build
# NO_SELF_PULL=1

# force pulling in pre_build even if image already exists locally
# WHEELS_FORCE_PULL=1

# use source, not pre compiled binary wheels
# NO_BINARY=1

# default modules to import for all builds
# toml and pycparser are now available as a none-any wheel
# DEFAULT_MODULE_IMPORTS='cffi pycparser toml'
DEFAULT_MODULE_IMPORTS='cffi'

# auditwheel is now available as a none-any wheel, no need to build
# we can just import auditwheel globally in the alpine-python-builder image
# [ -z "${NO_AUDITWHEEL+set}" ] \
# 	&& DEFAULT_MODULE_IMPORTS="auditwheel ${DEFAULT_MODULE_IMPORTS}"

DEFAULT_SSL='openssl'

# CACHE_EXPIRY=86400
CACHE_EXPIRY=604800

# don't get versions from this repo in python_get_module_from_string, use PyPi only
# otherwise we'd need to specify version numbers to build newer than we've built
# before, this allows us to build latest versions from PyPi by default when no
# version is specified in the build arguments
NO_WHEEL_REPO=1

# we should use the oldest possible Alpine version, to ensure the wheels are
# compatible with containers using older versions of Alpine. however, we need to
# be in at least Alpine 3.15 to get a new enough rust version to build
# 'cryptography' successfully. This means we're going to be building wheels with
# musl 1.2, and won't be compatible with musl 1.1 in Alpine 3.12 and earlier.
# MINIMUM_ALPINE_VERSION='3.15'

# now we're hitting problems with the patchelf version, so building in 3.17
# MINIMUM_ALPINE_VERSION='3.17'

# we need at least rust 1.74 for cryptography
MINIMUM_ALPINE_VERSION='3.19'

# BUILD_PROGRESS='plain'

declare -A BUILD_ARGS=( \
	[BUILD_ALPINE_VERSION]='Alpine version' \
	[BUILD_PYTHON_VERSION]='Python version' \
	[DEFAULT_MODULES]='Default modules' \
	[MODULE_NAME]='Module name' \
	[MODULE_VERSION]='Module version' \
	[MODULE_ENV]='Module env' \
	[SSL_LIBRARY]='SSL library' \
	[IMPORTS_DIR]='Imports dir' \
	[PYTHON_ARCH_TAG]='Python arch tag' \
	[NO_BINARY]='Build from source' \
	[NO_AUDITWHEEL]='No auditwheel' \
	[PYPI_INDEX]='PyPi index' \
)

declare -A CHECKOUT_DISPLAY=( \
	[MODULE_NAME]='Module name' \
	[MODULE_LONG_NAME]='Module long name' \
	[MODULE_VERSION]='Module version' \
	[BUILD_PYTHON_VERSION]='Python version' \
	[PYTHON_LATEST]='Python latest' \
	[WHEEL_TAGS]='Wheel imports' \
	[WHEEL_REPO]='Wheel repo' \
	[SSL_LIBRARY]='SSL library' \
	[PYPI_INDEX]='PyPi index' \
)

post_checkout_start () {
	eval_param 'BUILD_PYTHON_VERSION' "echo ${DOCKER_TAG} | grep -oP '(?<=-py)[0-9.]*'"

	eval_param_ifn SOURCE_REPO_TAGS "docker_api_repo_tags ${SOURCE_REPO}"

	eval_param 'PYTHON_LATEST' \
		"echo '${SOURCE_REPO_TAGS}' | xargs -n1 | grep -oP '^[0-9.]*(?=-alpine)' | sort -uV | tail -n1"

	# default to latest version if none is specified
	[ -z "${BUILD_PYTHON_VERSION}" ] && BUILD_PYTHON_VERSION="${PYTHON_LATEST}"

	# ..which is 2.7 if only '2' has been specified
	[ "x${BUILD_PYTHON_VERSION}" = 'x2' ] && BUILD_PYTHON_VERSION='2.7'

	# don't care about the full version, we'll just use X.Y instead of X.Y.Z
	eval_param 'BUILD_PYTHON_VERSION' \
		"echo ${BUILD_PYTHON_VERSION} | awk -F \. '{print \$1\".\"\$2}'"

	eval_param 'SOURCE_ALPINE_VERSIONS' \
		"echo '${SOURCE_REPO_TAGS}' | xargs -n1 | grep -oP '^${BUILD_PYTHON_VERSION}-alpine\\\K[0-9.]+$'"

	for alpine_version in ${SOURCE_ALPINE_VERSIONS}; do
		if [ "$(printf '%s\n' "${MINIMUM_ALPINE_VERSION}" "${alpine_version}" | sort -V | head -n1)" = "${MINIMUM_ALPINE_VERSION}" ]; then
			BUILD_ALPINE_VERSION="${alpine_version}"
			break
		fi
	done

	# if we can't meet the minimum Alpine version, either abort or go with highest available
	[ -z "${BUILD_ALPINE_VERSION}" ] \
		&& printf 'Cannot meet MINIMUM_ALPINE VERSION = %s\n' "${MINIMUM_ALPINE_VERSION}" \
		&& exit

	add_param "${BUILD_ALPINE_VERSION}" 'BUILD_ALPINE_VERSION'

	SOURCE_TAG="${BUILD_PYTHON_VERSION}-alpine${BUILD_ALPINE_VERSION}"

	# if we want to use 'alpine' as a source image rather than 'python', we'll need
	# to map versions:
	#
	# case ${BUILD_PYTHON_VERSION} in
	# 	'3.6') ALPINE_VERSION='3.9' ;;
	# 	'3.7') ALPINE_VERSION='3.10' ;;
	# 	'3.8') ALPINE_VERSION='3.13' ;;
	# 	'3.9') ALPINE_VERSION='3.14' ;;
	# 	'3.10') ALPINE_VERSION='3.16' ;;
	# 	*) ALPINE_VERISON='3.14' ;;
	# esac

	#	expect tags in the form: <module_name><module_version>-py<python version>-<arch>
	#	e.g.	cryptography3.4.6-py3.8-armv7

	# for this repo, NO_WHEEL_REPO needs to be set
	eval_param 'MODULE_NAMEVER' "python_get_module_from_string ${DOCKER_TAG}"

	# strip trailing version number from MODULE_NAMEVER
	eval_param 'MODULE_LONG_NAME' "echo ${MODULE_NAMEVER} | sed -E 's|([0-9.]*)\$||'"

	case "${MODULE_LONG_NAME##*-}" in
		libressl)
			# libressl-dev is not available from the Alpine package repo for s390x
			add_param 's390x' 'EXCLUDED_ARCHES'
			;;&
		libressl|openssl)
			add_param "${MODULE_LONG_NAME##*-}" 'SSL_LIBRARY'
			MODULE_NAME="${MODULE_LONG_NAME%-*}"
			;;
		*)
			add_param "${DEFAULT_SSL}" 'SSL_LIBRARY'
			MODULE_NAME="${MODULE_LONG_NAME}"
			;;
	esac
	add_param "${MODULE_NAME}" 'MODULE_NAME'
	add_param "${MODULE_NAMEVER//*[^0-9.]/}" 'MODULE_VERSION'

	# remove self from default imports
	DEFAULT_MODULE_IMPORTS="${DEFAULT_MODULE_IMPORTS//${MODULE_NAME}/}"

	TARGET_TAG="${MODULE_LONG_NAME}${MODULE_VERSION}-py${BUILD_PYTHON_VERSION}"

	# if there's a script for this module then source it
	module_script="./scripts/${MODULE_NAME}.sh"
	# shellcheck disable=SC1090
	[ -f "${module_script}" ] && . "${module_script}"

	add_param "${PYPI_INDEX:-https://pypi.org/simple}" 'PYPI_INDEX'
}

post_checkout_end () {
	# Grab any dependencies we've already built
	# This is useful to speed up images we've not built before.
	MODULE_IMPORTS=''

	# if there's a script for this module get dependencies from mod_depends()
	ifFuncSetVar 'MODULE_IMPORTS' 'mod_depends'

	MODULE_IMPORTS="${DEFAULT_MODULE_IMPORTS} ${MODULE_IMPORTS}"

	[ -z "${NO_SELF_PULL+set}" ] \
		&& MODULE_IMPORTS="${MODULE_LONG_NAME}${MODULE_VERSION} ${MODULE_IMPORTS}"

	# WHEEL_TAGS are the wheels to pull from this repo during pre-build
	WHEEL_TAGS=''
	for module in ${MODULE_IMPORTS}; do
		WHEEL_TAGS="$(python_get_module_from_string "${module}") ${WHEEL_TAGS}"
	done
	eval_param 'WHEEL_TAGS' "echo ${WHEEL_TAGS} | xargs -n1 | sort -uV | xargs"

	# get version for default wheels, default to the latest version in this repo
	# and fallback to PyPi if it doesn't exist
	# DEFAULT_MODULES is used during build in the Dockerfile
	[ -z "${DEFAULT_MODULES}" ] && for module in ${DEFAULT_MODULE_IMPORTS}; do
		modver="$(py_musl_wheel_latest ${module})"
		[ -z "${modver}" ] && modver="$(pypi_api_latest_version ${module})"
		DEFAULT_MODULES="${module}==${modver} ${DEFAULT_MODULES}"
	done
	add_param "${DEFAULT_MODULES}" 'DEFAULT_MODULES'
}

post_build () {
	echo '--- post_build (from build.conf) ---'

	[ ! -z "${BUILD_MULTIARCH+set}" ] \
		&& echo "No wheels output for buildx multiarch builds." \
		&& return

	[ -z "${BUILD_KEEP_IMPORTS+set}" ] \
		&& rm -rf "${IMPORTS_DIR}" "${QEMU_DIR}" >/dev/null 2>&1

	[ -z "${WHEELS_OUT}" ] \
		&& echo "No wheels output directory defined." \
		&& return
	[ -n "${SSL_LIBRARY+set}" ] && [ "${SSL_LIBRARY}" != "${DEFAULT_SSL}" ] \
		&& echo "Not outputting wheels for ${SSL_LIBRARY} build." \
		&& return

	echo "Copying built wheels to: ${WHEELS_OUT}/"
	[ -d "${WHEELS_OUT}" ] || mkdir -p "${WHEELS_OUT}"

	for arch in ${build_arches:-}; do
		for key in ${available_keys:-}; do
			var="${arch}_${key}"
			declare "${key}=${!var}"
		done

		[ ! -d "${WHEELS_OUT}/${arch}" ] && mkdir -p "${WHEELS_OUT}/${arch}"

		local image && image="${DOCKER_REPO}:${TARGET_TAG}-${TARGET_ARCH_TAG}"
		echo "Copying: ${image}"

		[ -n "${NOOP+set}" ] && echo '[NOOP]' && continue

		docker_container_contents "${image}" "${WHEELS_OUT}/${arch}/"
		rm -rf "${WHEELS_OUT}/${arch}/.arch" >/dev/null 2>&1 || true
	done
}

get_base_tags () {
	local base_tags
	local base_name && base_name="${TARGET_TAG}"

	# if using the default SSL library create a '<module>' tag from '<module>-<ssl>'
	[ "${MODULE_LONG_NAME}" != "${MODULE_NAME}" ] && \
		[ "${MODULE_LONG_NAME##*-}" = "${DEFAULT_SSL}" ] \
			&& base_name="$(echo "${TARGET_TAG}" | sed "s/${MODULE_LONG_NAME}/${MODULE_NAME}/")"

	# base_tags=("${base_name}")

	[ ! -z "${NO_SHARED}" ] \
		&& base_tags+=("${base_name}-alpine${BUILD_ALPINE_VERSION}")

	echo "${base_tags[@]}"
}

get_manifest_tags () {
	echo "$(get_base_tags)"
}
